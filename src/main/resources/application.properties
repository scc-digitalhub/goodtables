# local database config
spring.datasource.url=${JDBC_URL:jdbc:h2:file:./data/db}
spring.datasource.driverClassName=${JDBC_DRIVER:org.h2.Driver}
spring.datasource.username=${JDBC_USER:sa}
spring.datasource.password=${JDBC_PASS:password}
spring.jpa.database-platform=${JDBC_DIALECT:org.hibernate.dialect.H2Dialect}
spring.jpa.hibernate.ddl-auto=update

# server
server.port = 8080

# public url
application.url=${APPLICATION_URL:}

#auth
auth.enabled=${AUTH_ENABLED:true}

#scopes
scopes.default=default
scopes.enabled=true
scopes.list=*
scopes.roles.mapping.user=components/goodtables/<scope>:ROLE_USER

#openid
rest.security.issuer-uri=${OAUTH_ISSUER_URI:}
security.oauth2.client.scopes=${OAUTH_SCOPES:profile, email, user.roles.me}
security.oauth2.client.client-id=${OAUTH_CLIENT_ID:}
security.oauth2.client.client-secret=${OAUTH_CLIENT_SECRET:}
security.oauth2.client.access-token-uri=${OAUTH_TOKEN_URI:}
security.oauth2.client.user-authorization-uri=${OAUTH_AUTH_URI:}
security.oauth2.resource.id=${OAUTH_CLIENT_ID:}
## if token are NOT JWT tokeninfo is required
security.oauth2.resource.token-info-uri=${OAUTH_TOKEN_INTROSPECT_URI:}
security.oauth2.resource.user-info-uri=${OAUTH_USERINFO_URI:}
## if JWKS provided spring expects token as JWT
security.oauth2.resource.jwk.key-set-uri=${OAUTH_JWKS_URI:}

# validator properties
validator.maxsize = 10485760

# Minio configuration
minio.endpoint=${MINIO_ENDPOINT:}
minio.port=${MINIO_PORT:9000}
minio.secure=${MINIO_SECURE:false}
minio.region=${MINIO_REGION:}
minio.accessKey=${MINIO_ACCESS_KEY:}
minio.secretKey=${MINIO_SECRET_KEY:}

# Minio notifications manager
minionotifications.endpoint=${MINIONOTIFICATIONS_ENDPOINT:}
minionotifications.username=${MINIONOTIFICATIONS_USERNAME:}
minionotifications.password=${MINIONOTIFICATIONS_PASSWORD:}
minionotifications.token=${MINIONOTIFICATIONS_TOKEN:}
#supported methods are none/basic/token
minionotifications.auth=${MINIONOTIFICATIONS_AUTH:none}


# MQTT
mqtt.enable=${MQTT_ENABLE:true}
mqtt.broker=${MQTT_BROKER:}
mqtt.username=${MQTT_USERNAME:}
mqtt.password=${MQTT_PASSWORD:}
mqtt.identity=${MQTT_IDENTITY:}
mqtt.topic=${MQTT_TOPIC:}
mqtt.qos=${MQTT_QOS:2}

# logging
logging.level.it.smartcommunitylab.goodtables=${LOG_LEVEL:INFO}

